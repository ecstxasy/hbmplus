import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://plugins.gradle.org/m2' }
        mavenCentral()
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') { changing = true }
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'

if (Files.exists(Paths.get("curseforge.properties"))) {
    // Load CurseForge configuration
    ext.cfprops = parseConfig(file("curseforge.properties"))
}

group = "com.ecstasy.hbmplus" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
compileJava.options.encoding = 'UTF-8'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

def mod_version = project.hasProperty('mod_version') ? project.property('mod_version') : '1.0'

// A little hack to fix codechicken's crazy maven structure (at least in 1.7.10)
eclipse.classpath.file.whenMerged { cp ->
    // Find all codechicken source jars
    def srcent = cp.entries.findAll { entry -> entry.path.contains("codechicken") && entry.path.endsWith("-src.jar") }

    // Remove them from classpath
    cp.entries.removeAll srcent

    // Map the source entries to their dev counterparts based on basename
    Map<String, File> srcmap = new HashMap<String, File>()
    srcent.forEach { entry ->
        def file = new File(entry.path)
        srcmap.put(file.getName().replace("-src.jar", "-dev.jar"), file)
    }

    // Create file reference factory
    def fileref = new FileReferenceFactory()

    // Find all codechicken development jars
    cp.entries.findAll { entry -> entry.path.contains("codechicken") && entry.path.endsWith("-dev.jar") }.forEach { entry ->
        File srcmapping = new File(entry.path) // Initialize the srcmapping from the dev jar path
        srcmapping = srcmap.get(srcmapping.getName()) // Transform it using the sourcemap
        entry.sourcePath = fileref.fromFile(srcmapping) // Set the source path
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.dev'
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
		name = "gt"
		url = "https://gregtech.mechaenetia.com/"
	}
}

dependencies {
//    implementation 'codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev'
//    compileOnly 'codechicken:CodeChickenCore:1.7.10-1.0.7.47:src'

//    implementation 'codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev'
//    compileOnly 'codechicken:CodeChickenLib:1.7.10-1.1.3.140:src'

//    implementation 'codechicken:NotEnoughItems:1.7.10-1.0.3.74:dev'
//	compileOnly 'codechicken:NotEnoughItems:1.7.10-1.0.3.74:src'

    compile "codechicken:ForgeMultipart:1.7.10-1.2.0.345:dev"

    implementation 'com.github.HbmMods:Hbm-s-Nuclear-Tech-GIT:1.0.27_X5061'
    implementation files('libs/ccc.jar')
    implementation files('libs/nei.jar')
    implementation files('libs/ae2.jar')

}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		
		filesMatching('mcmod.info') {
			expand([
					version: mod_version,
			])
		}
	}
		
	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

jar {
    baseName = "hbmplus-${mod_version}" // Replace with your desired name
}

// Properties file parsing helper
static def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

tasks.withType(JavaExec) {
    if (name == 'runClient') {
        jvmArgs = [
            '-Xmx8G', // Allocate 8 GB of RAM for the client
            '-Xms4G'  // Set the initial heap size to 4 GB
        ]
    }
}
